// Keywords: continuous space, continuous spatial landscape, reprising boundaries

initialize() {
	initializeSLiMOptions(dimensionality="xy");
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=0.1);
	 // Set up an interaction for spatial competition
   initializeInteractionType(1, "xy", reciprocal=T, maxDistance=0.3);
   i1.setInteractionFunction("n", 3.0, 0.1);
}

early() { i2.evaluate(); }

 1: mateChoice() {
      neighbors = i2.nearestNeighbors(individual, 10);
      return (size(neighbors) ? sample(neighbors, 1) else float(0));
   } 
   
1 late() {
	sim.addSubpop("p1", 2000);
	
	// initial positions are random in ([0,1], [0,1])
	for (ind in p1.individuals) {
		do {
			p = p1.pointUniform(1);
			d = max(abs(p - 0.5));
		} while (d > 0.3);
		ind.setSpatialPosition(p);
	}
}

1: late() {
      i1.evaluate();
      inds = p1.individuals;
      totalStrengths = i1.totalOfNeighborStrengths(inds);
      inds.fitnessScaling = 1.1 - totalStrengths / inds.size();
}

 modifyChild() {
      // Absorbing boundary conditions
      pos = parent1.spatialPosition + rnorm(2, 0, 0.1);
      if (!p1.pointInBounds(pos))
return F;
      child.setSpatialPosition(pos);
return T; }20000 late() { sim.outputFixedMutations(); }
